#模型部分#####################################################
models/common.py模块是模型基础层模块
其中C3的一个变种C3TR是Transformer模块，里面包含BLOCK和Layer
重点关注
models/yolo.py模块是yolov层级联管理模块
def parse_model(d, ch):  # model_dict, input_channels(3) 解析yaml格式的模型文件结构
    LOGGER.info(f"\n{'':>3}{'from':>18}{'n':>3}{'params':>10}  {'module':<40}{'arguments':<30}")
    anchors, nc, gd, gw = d['anchors'], d['nc'], d['depth_multiple'], d['width_multiple']
    anchorsab = d['anchorsab']
    na = (len(anchors[0]) // 2) if isinstance(anchors, list) else anchors  # number of anchors
    no = na * (nc + 5)  # number of outputs = anchors * (classes + 5)
    ## add
    save2 = set()
    ##
    layers, save, c2 = [], [], ch[-1]  # layers, savelist, ch out
    for i, (f, n, m, args) in enumerate(d['backbone'] + d['head']):#（f, n, m, args)对应yaml文件里面的from, number, module, args
        m = eval(m) if isinstance(m, str) else m  # eval strings,作为嵌套执行的python字符串命令，这里返回一个commom定义模型类
        for j, a in enumerate(args):
            try:
                args[j] = eval(a) if isinstance(a, str) else a  # eval strings
            except NameError:
                pass

        n = n_ = max(round(n * gd), 1) if n > 1 else n  # depth gain
        if m in [Conv, GhostConv, Bottleneck, GhostBottleneck, SPP, SPPF, DWConv, MixConv2d, Focus, CrossConv,
                 BottleneckCSP, C3, C3TR, C3SPP, C3Ghost, CBAM, CSPC, CSPCAM, CSPSAM]:

class Model(nn.Module):
里面的_forward_once函数是yolo级联模型的一般通用调用方法,包含了尾层Detect和Detect2
    def forward(self, x, augment=False, profile=False, visualize=False):
        if augment:
            return self._forward_augment(x)  # augmented inference, None
        return self._forward_once(x, profile, visualize)  # single-scale inference, train

    def _forward_once(self, x, profile=False, visualize=False):
        y, dt = [], []  # outputs
        # add
        out = []
        for m in self.model:
            if m.f != -1:  # if not from previous layer
                x = y[m.f] if isinstance(m.f, int) else [x if j == -1 else y[j] for j in m.f]  # from earlier layers
            if profile:
                self._profile_one_layer(m, x, dt)
            x = m(x)  # run
            y.append(x if m.i in self.save else None)  # save output
            # y.append(x)  # save output
            # y.append(x)
            if visualize:
                feature_visualization(x, m.type, m.i, save_dir=visualize)
            # add
            if type(m) in [Detect, Detect2]:
                if not self.training:
                    out.append(x)
                else:
                    out.extend(x)
                # out.append(x)
        # feat = y[18]
        # show_heatmap(feat.cpu().detach().numpy()[0])
        # 输出热图时候同时输出y
        # return out, y
        return out
还包含输出层集成模块Detect用于水平框集成输出,Detect2用于斜框集成输出
Detect
def forward(self, x):
        z = []  # inference output
        for i in range(self.nl):
            x[i] = self.m[i](x[i])  # conv
            bs, _, ny, nx = x[i].shape  # x(bs,255,20,20) to x(bs,3,20,20,85)
            x[i] = x[i].view(bs, self.na, self.no, ny, nx).permute(0, 1, 3, 4, 2).contiguous()

            if not self.training:  # inference
                if self.onnx_dynamic or self.grid[i].shape[2:4] != x[i].shape[2:4]:
                    self.grid[i], self.anchor_grid[i] = self._make_grid(nx, ny, i)

                y = x[i].sigmoid()
                if self.inplace:
                    y[..., 0:2] = (y[..., 0:2] * 2 - 0.5 + self.grid[i]) * self.stride[i]  # xy
                    # y[..., 2:4] = (y[..., 2:4] * 2) ** 2.6 * self.anchor_grid[i]  # wh
                    y[..., 2:4] = (y[..., 2:4] * 2) ** 2 * self.anchor_grid[i]  # wh
                else:  # for YOLOv5 on AWS Inferentia https://github.com/ultralytics/yolov5/pull/2953
                    xy = (y[..., 0:2] * 2 - 0.5 + self.grid[i]) * self.stride[i]  # xy
                    wh = (y[..., 2:4] * 2) ** 2 * self.anchor_grid[i]  # wh
                    y = torch.cat((xy, wh, y[..., 4:]), -1)
                # z.append(y.view(bs, -1, self.no))
                z.append(y)#y[bs,na,H,W,no=4+1+nc]

        # return x if self.training else (torch.cat(z, 1), x)
        return x if self.training else (z, x)#z[nl][bs,na,H,W,no=4+1+nc]

Detect2#目标斜框方向输出层
def forward(self, x):
        z = []  # inference output
        for i in range(self.nl):
            x[i] = self.m[i](x[i])  # conv
            bs, _, ny, nx = x[i].shape  # x(bs,15,20,20) to x(bs,3,20,20,5)
            x[i] = x[i].view(bs, self.na, self.no, ny, nx).permute(0, 1, 3, 4, 2).contiguous()

            if not self.training:  # inference
                if self.onnx_dynamic or self.grid[i].shape[2:4] != x[i].shape[2:4]:
                    self.grid[i], self.anchor_grid[i] = self._make_grid(nx, ny, i)

                y = x[i].sigmoid()
                if self.inplace:
                    y[..., 1:3] = y[..., 1:3] * 2 - 1   # theta
                    # y[..., 3:5] = (y[..., 3:5] * 2) ** 2.6 * self.anchor_grid[i]  # ab
                    y[..., 3:5] = (y[..., 3:5] * 2) ** 2 * self.anchor_grid[i]  # ab
                # if self.inplace:
                #     y = x[i]
                #     y[..., 0] = y[..., 0].sigmoid()
                #     y[..., 1:3] = y[..., 1:3].sigmoid() * 2 - 1   # theta
                #     y[..., 3:5] = torch.exp(y[..., 3:5]) * self.anchor_grid[i]  # ab
                else:
                    raise Exception("Detect2 forward error")
                # z.append(y.view(bs, -1, self.no))
                z.append(y)#y[bs,na,H,W,no=1(p)+2(dir)+2(ab)]

        # return x if self.training else (torch.cat(z, 1), x)
        return x if self.training else (z, x)#z[nl][bs,na,H,W,no=1(p)+2(dir)+2(ab)]

utils/general.py里面包含了
#斜框
def rot_nms(prediction, conf_thres=0.25, iou_thres=0.3, ab_thres=3.0, fold_angle=2, mask_dir=[]):
#水平框
def non_max_suppression(prediction, conf_thres=0.25, iou_thres=0.45, classes=None, agnostic=False, multi_label=False,
                        labels=(), max_det=300):
注意这里绝不仅仅是nms，而是包含了yolo后处理过滤目标的全部过程

rot_nms里面调用了
torchvision.ops.nms函数调用的box参数是[xmin, ymin, xmax, ymax]格式，而yolo里面通常是[x,y,w,h]格式，
因此需要调用xywh2xyxy(boxes)转换成[xmin, ymin, xmax, ymax]
如：id_nms = torchvision.ops.nms(xywh2xyxy(boxes), scores, iou_thres)

推理方法调用和shape
#out,train_out = detect(model, training, im,augment,conf_thres, iou_thres, ab_thres, fold_angle=fold, mask_dir=data['mask_dir'])
def detect(model, training, im,augment,conf_thres, iou_thres, ab_thres, fold_angle,mask_dir=[],threshs=torch.zeros(0),dt=[]):
    # inference
    if dt!=[]:
        # inference
        t2 = time_sync()
        if training:
            out,train_out = [],[]
            tmp = model(im, augment=augment)
            for t in tmp:
                out.append(t[0])
                train_out.extend(t[1])
        else:
            out, train_out = model(im, augment=augment, val=True)
        t3 = time_sync()
        dt[1] += t3 - t2#dt[1]推理时间

        # NMS  pts[4*2]部分全部变成绝对坐标
        #pred[2=Detect+Detect2][nl][b,a,H,W,Dectct(5+c) or Detect2(5=1+2(dir)+2(ab))]
        out = rot_nms(out, conf_thres, iou_thres, ab_thres, fold_angle, mask_dir,threshs)
        #out[b][nt,10=2*4+1(conf)+1(cls)]
        dt[2] += time_sync() - t3#dt[2]后处理时间
        
        return out,train_out
    else:
        pred = model(im, augment=0, val=True)[0]
        #pred[2=Detect+Detect2][nl][b,a,H,W,Dectct(4(box)+1(conf)+nc) or Detect2(5=1(p)+2(dir)+2(ab))]
        pred = rot_nms(pred, conf_thres, iou_thres, ab_thres=ab_thres, fold_angle=fold_angle, mask_dir=mask_dir,threshs=threshs)
        #pred[b][nt,10=4(pts)*2+1(conf)+1(cls)]
        return pred


5.models/yolov5l-guge.yaml
models/common.py模块是模型基础层模块
定义了模型块结构，其中每一行其实相当于很多卷积层的组合，算是一个层编号
